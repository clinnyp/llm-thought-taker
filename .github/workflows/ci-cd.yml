name: Build, Push and Deploy

on:
  push:
    branches:
      - main
    paths:
      - 'server/**'
      - 'terraform/**'
      - '.github/workflows/**'
      - 'Dockerfile'
  workflow_dispatch:

jobs:

  terraform:
    runs-on: ubuntu-latest
    env:
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}

    outputs: 
      webapp_url: ${{ steps.tf_outputs.outputs.webapp_url }}
      webapp_name: ${{ steps.tf_outputs.outputs.webapp_name }}
      rg_name: ${{ steps.tf_outputs.outputs.rg_name }}
      acr_name: ${{ steps.tf_outputs.outputs.acr_name }}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Terraform Setup
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false

      - name: Terraform Init & Apply
        id: apply
        run: | 
          cd terraform
          terraform init
          terraform apply  \
          -var="clerk_domain=${{ secrets.CLERK_DOMAIN }}" \
          -var="db_connection_string=${{ secrets.DB_CONNECTION_STRING }}" \
          -var="gemini_api_key=${{ secrets.GEMINI_API_KEY }}" \
          -var="image_tag=${{ github.sha }}" \
          -auto-approve

      - name: Terraform Outputs
        id: tf_outputs
        run: |
          cd terraform
          echo "webapp_url=$(terraform output -raw webapp_url)" >> $GITHUB_OUTPUT
          echo "webapp_name=$(terraform output -raw webapp_name)" >> $GITHUB_OUTPUT
          echo "rg_name=$(terraform output -raw rg_name)" >> $GITHUB_OUTPUT
          echo "acr_name=$(terraform output -raw acr_name)" >> $GITHUB_OUTPUT 

  build-and-push:
    runs-on: ubuntu-latest
    needs: terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Azure Container Registry
        uses: azure/login@v2
        with:
          creds: |
            {
              "clientId": "${{ secrets.ARM_CLIENT_ID }}",
              "clientSecret": "${{ secrets.ARM_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.ARM_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.ARM_TENANT_ID }}"
            } 

      - name: Get ACR Credentials
        id: acr_creds
        run: |
          ACR_NAME="${{ needs.terraform.outputs.acr_name }}"
          RG_NAME="${{ needs.terraform.outputs.rg_name }}"
          
          # Get ACR credentials from Azure (secure - not from job outputs)
          ACR_LOGIN_SERVER=$(az acr show --name $ACR_NAME --resource-group $RG_NAME --query loginServer -o tsv)
          ACR_USERNAME=$(az acr credential show --name $ACR_NAME --resource-group $RG_NAME --query username -o tsv)
          ACR_PASSWORD=$(az acr credential show --name $ACR_NAME --resource-group $RG_NAME --query "passwords[0].value" -o tsv)
          
          echo "acr_login_server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
          echo "acr_username=$ACR_USERNAME" >> $GITHUB_OUTPUT
          echo "acr_password=$ACR_PASSWORD" >> $GITHUB_OUTPUT
        
      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v2
        with:
         login-server: ${{ steps.acr_creds.outputs.acr_login_server }}
         username: ${{ steps.acr_creds.outputs.acr_username }}
         password: ${{ steps.acr_creds.outputs.acr_password }}

      - name: Build and push Docker image
        run: |
          docker build -f server/Dockerfile -t ${{ steps.acr_creds.outputs.acr_login_server }}/llm-thought-taker:${{ github.sha }} ./server
          docker tag ${{ steps.acr_creds.outputs.acr_login_server }}/llm-thought-taker:${{ github.sha }} ${{ steps.acr_creds.outputs.acr_login_server }}/llm-thought-taker:latest
          docker push ${{ steps.acr_creds.outputs.acr_login_server }}/llm-thought-taker:${{ github.sha }}
          docker push ${{ steps.acr_creds.outputs.acr_login_server }}/llm-thought-taker:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [terraform, build-and-push]

    steps:
      - name: Login to Azure
        uses: azure/login@v2
        with:
          creds: |
            {
              "clientId": "${{ secrets.ARM_CLIENT_ID }}",
              "clientSecret": "${{ secrets.ARM_CLIENT_SECRET }}",
              "subscriptionId": "${{ secrets.ARM_SUBSCRIPTION_ID }}",
              "tenantId": "${{ secrets.ARM_TENANT_ID }}"
            }  

      - name: Get ACR Credentials
        id: acr_creds
        run: |
          ACR_NAME="${{ needs.terraform.outputs.acr_name }}"
          RG_NAME="${{ needs.terraform.outputs.rg_name }}"
          
          # Get ACR credentials from Azure (secure - not from job outputs)
          ACR_LOGIN_SERVER=$(az acr show --name $ACR_NAME --resource-group $RG_NAME --query loginServer -o tsv)
          ACR_USERNAME=$(az acr credential show --name $ACR_NAME --resource-group $RG_NAME --query username -o tsv)
          ACR_PASSWORD=$(az acr credential show --name $ACR_NAME --resource-group $RG_NAME --query "passwords[0].value" -o tsv)
          
          echo "acr_login_server=$ACR_LOGIN_SERVER" >> $GITHUB_OUTPUT
          echo "acr_username=$ACR_USERNAME" >> $GITHUB_OUTPUT
          echo "acr_password=$ACR_PASSWORD" >> $GITHUB_OUTPUT

      - name: Update Web App Container
        run: |
          az webapp config container set \
            --name ${{ needs.terraform.outputs.webapp_name }} \
            --resource-group ${{ needs.terraform.outputs.rg_name }} \
            --docker-custom-image-name ${{ steps.acr_creds.outputs.acr_login_server }}/llm-thought-taker:${{ github.sha }} \
            --docker-registry-server-url https://${{ steps.acr_creds.outputs.acr_login_server }} \
            --docker-registry-server-user ${{ steps.acr_creds.outputs.acr_username }} \
            --docker-registry-server-password ${{ steps.acr_creds.outputs.acr_password }}

      - name: Restart Web App
        run: |
          az webapp restart \
            --name ${{ needs.terraform.outputs.webapp_name }} \
            --resource-group ${{ needs.terraform.outputs.rg_name }} 

  deployment-success:
    runs-on: ubuntu-latest
    needs: [terraform, build-and-push, deploy]

    steps:
      - name: Deployment Success
        run: |
          echo ${{ needs.terraform.outputs.webapp_url }}